---
title: "&nbsp;Hands–On<br>Data Visualization<br>with {ggplot2}"
subtitle: "— Concepts —"
author: "<b style='color:#28a87d;'><a href='https://www.cedricscherer.com'>Cédric Scherer</a></b> **//** Pearson Live Training Session for O'Reilly **//** June 13, 2023"
format:
  revealjs:
    theme: css/style.scss
    footer: '**[Cédric Scherer](https://cedricscherer.com) //** Hands–On Data Visualization with ggplot2: Concepts'
    logo: https://d33wubrfki0l68.cloudfront.net/d4cd9bd8e591d8973d68f98a71544bbe65d53733/79b34/img/logo.png
    transition: fade
    progress: true
    multiplex: false
    preview-links: true
    scrollable: false
    hide-inactive-cursor: true
    highlight-style: printing
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: true
    pause: true
    mainfont: Cabinet Grotesk
editor: source
knitr:
  opts_chunk:
    dev: "ragg_png"
    retina: 2
    dpi: 300
execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 5
  fig-height: 6
---

```{r}
#| label: setup
#| echo: false
#| cache: false
#| purl: false
knitr::opts_chunk$set(dev.args = list(bg = "white"))
set.seed(2023)
options(width = 110)
invisible(Sys.setlocale("LC_TIME", "C"))

library(dplyr)
library(ggplot2)
library(babynames)

theme_set(theme_grey(base_size = 15, base_line_size = .3, base_family = "Roboto Condensed"))
theme_update(panel.background = element_rect(fill = "grey95", colour = NA))
```


# Welcome!


##  {background-image="img/intro/portfolio-cards.png" background-position="center" background-size="80%"}

::: footer
:::


##  {background-image="img/intro/projects-science.png" background-position="center" background-size="80%" background-color="#404040"}

::: footer
:::


##  {background-image="img/intro/projects-clients.png" background-position="center" background-size="80%" background-color="#404040"}

::: footer
:::


##  {background-image="img/intro/projects-personal.png" background-position="center" background-size="80%" background-color="#404040"}

::: footer
:::


# <b style='color:#404040;font-size:.64em;font-weight:600;'>— What is the Course About? —</b>


## The Data Science Workflow

<br><br>

![The data science workflow, modified from ["R for Data Science"](https://r4ds.had.co.nz/)](img/intro/data-science-workflow.png){fig-align="center" fig-alt="A conceptional representation of the data science workflow:the first step is data import, afterwards the data gets tidied (prepared, shaped). Then follows an iterative process of visualization, transformation and modeling. Once the final analysis is done, the results need to be communicated. All the steps are surrounded by the step program."}


## The Data Science Workflow

<br><br>

![The data science workflow, modified from ["R for Data Science"](https://r4ds.had.co.nz/)](img/intro/data-science-workflow-viz.png){fig-align="center" fig-alt="The same conceptional representation of the data science workflow, with the relevant steps for visualization (visualize + communicate) being highlighted."}


##  {background-image="img/intro/R_logo.png" background-position="center" background-size="50%"}


## What is R?

<p class="simple-highlight-grn" style='font-size:1.1em;line-height:1.1;'>R is a programming language and free software environment for statistical computing and graphics.</p>
<br>  

. . .

R was conceived in 1992 by **Ross Ihaka** and **Robert Gentleman** as an open source implementation of the `S` programming language and released in 1995.

. . .

Since then, R has outgrown its original purpose and is used to:

* run statistical analyses and data-science workflows
* design high-level, publication–ready visualizations
* generate automated reports
* develop stand-alone web applications
* create presentation slides, books, and web pages


---

<br><br>

![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/intro/ah_first_then.png){fig-align="center" fig-alt="Allison Horsts illustration of her world before and after knowing (about) R"}


## POLL

**Do you use R already?**

* Yes, on a regular basis.
* Yes, from time to time.
* Yes, but just starting.
* No.


# The Grammar<br>of Graphics


## The Grammar of Graphics

::: incremental
-   was introduced by [Lee Wilkinson in 2005](https://link.springer.com/book/10.1007/0-387-28695-0)
-   can be used to concisely describe components of a graphic
-   provides a set of structural rules
-   consists of syntax and semantics
-   can be used to define "uncommon" visualizations
:::


---

::: footer
[{ggplot2} package description](https://ggplot2.tidyverse.org/)
:::

![](img/ggplot2.png){fig-align="center" fig-alt="The ggplot2 hex logo."}

<br>

<b style='font-size:30pt;'><code>{ggplot2}</code> is a system for declaratively creating graphics,<br>based on ["The Grammar of Graphics"]{.simple-highlight-grn} (Wilkinson, 2005).</b>

. . .

[You provide the data, tell <code>{ggplot2}</code> how to]{style="font-size:24pt;"} [map variables to aesthetics,]{.circle-highlight}<br>what graphical primitives to use, and it takes care of the details.


## Advantages of {ggplot2}

::: incremental
-   consistent underlying "grammar of graphics"\
-   code-first approach &rarr; reproducible and transparent workflow\
-   very flexible, layered plot specification\
-   theme system for polishing plot appearance\
-   lots of additional functionality thanks to extensions\
-   active and helpful community
:::


## POLL

**Do you have created visualizations with {ggplot2} already?**

* Yes, I can create publication-ready figures with it.
* Yes, but I use it in combination with other tools.
* Yes, but I would consider myself a beginner.
* No, I have never used it before.


## A Basic ggplot

<br>
<b style='font-size:1.5em;font-family: spline sans mono;'>
&emsp;&emsp;data
</b>


## A Basic ggplot

<br>
<b style='font-size:1.5em;font-family: spline sans mono;'>
&emsp;&emsp;data +  
&emsp;&emsp;&emsp;mapping
</b>


## A Basic ggplot

<br>
<b style='font-size:1.5em;font-family: spline sans mono;'>
&emsp;&emsp;data +  
&emsp;&emsp;&emsp;mapping +  
&emsp;&emsp;&emsp;geometry
</b>


## A Polished ggplot

<br>
<b style='font-size:1.5em;font-family: spline sans mono;'>
&emsp;&emsp;data +  
&emsp;&emsp;&emsp;mapping +  
&emsp;&emsp;&emsp;geometry +  
<b style='color:#28a87d;'>
&emsp;&emsp;&emsp;statistics +  
&emsp;&emsp;&emsp;facets +  
&emsp;&emsp;&emsp;coordinate systems +   
&emsp;&emsp;&emsp;scales +   
&emsp;&emsp;&emsp;theme
</b></b>

---

![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ah_ggplot2_exploratory.png){fig-align="center" fig-alt="Allison Horsts monster illustration of explorative plotting with ggplot2."}


---

![ggplot2 Examples featured on ggplot2.tidyverse.org](img/basic_ggplots.png){fig-align="center" fig-alt="A collection of the versatility of ggplot2 to create basic graphs. All of them use the default grey ggplot2 theme."}


---

![Illustration by [Allison Horst](https://github.com/allisonhorst/stats-illustrations)](img/ah_ggplot2_masterpiece.png){fig-align="center" fig-alt="Allison Horsts monster illustration of building a data masterpiece with ggplot2 featuring a little Picasso monster :)"}


---

<br>
![Collection of Graphics from the BBC R Cookbook](img/bbc-gallery.png){fig-align="center" fig-alt="A multi-plot panel of various data visualizations created by the BBC teams."}


---

<br>
![Collection of Graphics from the BBC R Cookbook](img/bbc-gallery-quote.png){fig-align="center" fig-alt="A multi-plot panel of various data visualizations created by the BBC teams."}


---

![Selection of visualizations created 100% with ggplot2 by Thomas Linn Pedersen,<br>Georgios Karamanis, Timo Gossenbacher, Torsten Sprengler, Jake Kaupp, Jack Davison, and myself.](img/showcase.png){fig-align="center" fig-size="80%" fig-alt="A collection of more advanced graphics created100% with ggplot2."}


##  {background-image="img/blog-evol.png" background-position="center" background-size="43%"}


##  {background-image="img/blog-tutorial.png" background-position="center" background-size="43%"}


##  {background-image="img/blog-rstudioconf.png" background-position="center" background-size="43%"}


##  {background-image="img/github.png" background-position="center" background-size="43%"}


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— A Motivational Example —</b>

```{r}
#| label: prep
#| echo: false
#| freeze: false
#| purl: false
```

```{r}
#| label: data-prep-example
#| echo: false
#| purl: false
babynames_unique <- 
  babynames %>% 
  group_by(name) %>% 
  slice(1) %>% 
  ungroup() %>% 
  count(year, sex) %>% 
  mutate(sex = ifelse(sex == "F", "female", "male")) %>% 
  filter(year > 1880)
```


---

```{r}
#| label: example-motivation-01-basic-points
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_point()
```


---

```{r}
#| label: example-motivation-02-basic-columns
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_col()
```


---

```{r}
#| label: example-motivation-03-basic-aesthetics-color
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_col(aes(fill = sex))
```


---

```{r}
#| label: example-motivation-04-basic-line
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_line(aes(color = sex), linewidth = .8)
```


---

```{r}
#| label: example-motivation-05-basic-area-stacked
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_area(aes(color = sex, fill = sex), alpha = .35, linewidth = .8)
```


---

```{r}
#| label: example-motivation-06-basic-area-identity
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_area(aes(color = sex, fill = sex), position = "identity", alpha = .35, linewidth = .8)
```


---

```{r}
#| label: example-motivation-07-basic-labs
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_area(aes(color = sex, fill = sex)) +
  labs(x = NULL, y = "# names used for the first time", color = NULL, fill = NULL,
       title = "Every year, hundreds of babies in the US get a name that has not been given before",
       subtitle = "... but those numbers are mostly dropping since 2008 for both sexes",
       caption = "Source: US Social Security Administration (SSA)") -> g1

g1
```


---

```{r}
#| label: example-motivation-08-facet
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g1 + facet_wrap(~ sex)
```

---

```{r}
#| label: example-motivation-09-facet-shading
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
ggplot(babynames_unique, aes(x = year, y = n)) +
  geom_area(data = select(babynames_unique, year, n, s = sex), aes(group = s), fill = "grey87") +
  geom_area(aes(color = sex, fill = sex), linewidth = .8) +
  facet_wrap(~ sex) +
  labs(x = NULL, y = "# names used for the first time", color = NULL, fill = NULL,
       title = "Every year, hundreds of babies in the US get a name that has not been given before",
       subtitle = "... but those numbers are mostly dropping since 2008 for both sexes",
       caption = "Source: US Social Security Administration (SSA)") -> g2

g2
```


---

```{r}
#| label: example-motivation-10-colors
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g2 +
  scale_color_manual(values = c("#1D785A", "#663399")) +
  scale_fill_manual(values = c("#5ACDA6", "#B988EB")) -> g3

g3
```


---

```{r}
#| label: example-motivation-11-theme
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g3 +
  theme_minimal(base_family = "Anybody", base_size = 22)
```


---

```{r}
#| label: example-motivation-12-theme-adjustments
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g3 +
  theme_minimal(base_family = "Anybody", base_size = 22) +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major.x = element_blank(),
        axis.title = element_text(size = rel(.9), color = "grey40"),
        axis.text = element_text(size = rel(.9), color = "grey40"),
        axis.ticks.x = element_line(color = "grey90"),
        axis.ticks.length.x = unit(.5, "lines"),
        panel.spacing.x = unit(2, "lines"),
        legend.position = "none",
        strip.text = element_text(size = rel(1)),
        plot.title.position = "plot", 
        plot.caption.position = "plot",
        plot.title = element_text(face = "bold", margin = margin(t = 0, b = 5)),
        plot.subtitle = element_text(margin = margin(t = 0, b = 0)),
        plot.caption = element_text(margin = margin(t = 20), color = "grey40", size = rel(.8)),
        plot.margin = margin(15, 15, 10, 15)) -> g4

g4
```


---

```{r}
#| label: example-motivation-13-axes
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false
g4 +
  coord_cartesian(expand = FALSE) +
  scale_y_continuous(labels = scales::label_comma())
```


---

```{r}
#| label: example-motivation-14-annotation
#| fig-width: 14
#| fig-height: 8.3
#| echo: false
#| purl: false

notes <- tibble::tibble(
  year = c(1919, 1919, 1970), 
  n = c(650, 650, 1150), 
  sex = c("female", "male", "female"), 
  lab = c("Around 1920, <b style='color:#28A87D;'>new female<br>names</b> were booming...", 
          "... and <b style='color:#9C55E3;'>new male names</b> as well", 
          "More recently, there are<br>way more new <b style='color:#28A87D;'>female names</b><br>given than <b style='color:#9C55E3;'>male names</b>")
)

g4 +
  ggtext::geom_richtext(
    data = notes, aes(label = lab), 
    family = "Anybody", label.colour = NA, fill = NA, size = 5.7, vjust = 0
  ) +
  coord_cartesian(expand = FALSE) +
  scale_y_continuous(labels = scales::label_comma()) +
  theme(strip.text = element_text(color = "white"))
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Setup —</b>


---

<br>

![Modified from [ModernDive](moderndive.netlify.com/1-getting-started.html)](img/r-vs-rstudio.png){fig-align="center" width="70%" fig-alt="An image of an engine, representing R, and an image of a car dashboard, representing RStudio."}

. . .

::: {.incremental}
* **RStudio** is an open-source IDE (integrated development environment) for R
* many features + extensions to facilitate workflows (version control, toc, add-ins, ...)

:::


## {background-image="img/r-terminal.png" background-position="center" background-size="80%"}


## {background-image="img/rstudio.png" background-position="center" background-size="80%"}


## {background-image="img/rstudio-panes-labs.png" background-position="center" background-size="80%"}


---

![](img/rstudio-options-graphics.png){fig-align="center" fig-alt="A screenshot of the options in RStudio, showing the preferred graphics backend: AGG."}


## The ggplot2 Package

<br>

... is an **R package to visualize data** created by Hadley Wickham in 2005

```{r}
#| label: ggplot-package-install-2
#| eval: false
library(ggplot2)
```
<br>

. . .

... can be loaded as part of the `{tidyverse}` package collection as well:

```{r}
#| label: tidyverse-package-install-2
#| eval: false
library(tidyverse)
```


## Packages?!

A package is a <span class="simple-highlight-grn">collection of functions, data, and other objects</span><br>that are designed to **perform specific tasks or solve certain problems**.  
<br>

. . .

We need `{ggplot2}` but also a few other packages:

```{r}
#| label: tidyverse-packages-single
#| eval: false
install.packages("ggplot2")
install.packages("dplyr")
install.packages("readr")
install.packages("forcats")
install.packages("stringr")
```

. . .

All of these packages are part of the [`{tidyverse}` package collection](https://www.tidyverse.org/):

```{r}
#| label: tidyverse-package
#| eval: false
install.packages("tidyverse")
```

. . .

We also need the following packages:

```{r}
#| label: other-packages
#| eval: false
install.packages("scales")
install.packages("ragg")
install.packages("gapminder")
```


## The Data

<b style='font-size:2.3rem;'>The famous [Gapminder](https://www.gapminder.org/) data set</b>

::: incremental
-   life expectancy, GDP per capita, and population by country
-   contains complete data covering the years 1952-2007 in 5-year steps
:::

. . .

```{r}
#| label: data-import-package
#| purl: false
library(gapminder)
```


## The Data

<b style='font-size:2.3rem;'>The famous [Gapminder](https://www.gapminder.org/) data set</b>

-   life expectancy, GDP per capita, and population by country
-   contains complete data covering the years 1952-2007 in 5-year steps

```{r}
#| label: data-import-package-print
library(gapminder)
gapminder
```


## The Data

<b style='font-size:2.3rem;'>The famous [Gapminder](https://www.gapminder.org/) data set</b>

-   life expectancy, GDP per capita, and population by country
-   contains complete data covering the years 1952-2007 in 5-year steps

```{r}
#| label: data-import-local
#| purl: false
gapminder <- readr::read_csv("./data/gapminder.csv")
```


## The Data

<b style='font-size:2.3rem;'>The famous [Gapminder](https://www.gapminder.org/) data set</b>

-   life expectancy, GDP per capita, and population by country
-   contains complete data covering the years 1952-2007 in 5-year steps

```{r}
#| label: data-import-local-print
gapminder <- readr::read_csv("./data/gapminder.csv")
gapminder
```


---

![](https://static.gapminder.org/GapminderMedia/wp-uploads/ScreenShot-Gapminder-World-2012.jpg){fig-align="center" fig-width="35%" fig-alt="The famous gapminder visualization as a poster, showing the 2012 data."}


---


![](https://s3.eu-west-1.amazonaws.com/static.gapminder.org/GapminderMedia/wp-uploads/20161215191134/countries_health_wealth_2016_v13.jpg){fig-align="center" fig-width="35%" fig-alt="An updated version of the gapminder visualization as a poster, showing the 2015 data in a new design."}


```{r}
#| label: data-prep-income-levels
#| include: false
#| purl: false
gapminder <- mutate(
  gapminder, income_lvl = case_when(
    gdpPercap < 1045 ~ "1",
    gdpPercap >= 1045 & gdpPercap < 4095 ~ "2",
    gdpPercap >= 4095 & gdpPercap < 12695 ~ "3",
    TRUE ~ "4"
  )
)
```


## Data Preparation

We are using a few subsets of the Gapminder data:

```{r}
#| label: data-subset-1
#| freeze: false
#| code-line-numbers: "1|2"
#| purl: false
library(dplyr)
gm2007 <- filter(gapminder, year == 2007)
```


## Data Preparation

We are using a few subsets of the Gapminder data:

```{r}
#| label: data-subset-1-print
#| code-line-numbers: "3"
library(dplyr)
gm2007 <- filter(gapminder, year == 2007)
gm2007
```


## The Data

We are using a few subsets of the Gapminder data:

```{r}
#| label: data-subset-2
#| freeze: false
#| code-line-numbers: "2,3,4"
#| purl: false
library(dplyr)
gm_g7 <- filter(gapminder, country %in% c(
  "United States", "Canada", "France", "Germany", "Italy", "Japan", "United Kingdom")
)
```


## The Data

We are using a few subsets of the Gapminder data:

```{r}
#| label: data-subset-2-print
#| code-line-numbers: "5"
library(dplyr)
gm_g7 <- filter(gapminder, country %in% c(
  "United States", "Canada", "France", "Germany", "Italy", "Japan", "United Kingdom")
)
gm_g7
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— The Structure of a ggplot —</b>


## The Components of {ggplot2}

<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
</table>


## The Components of {ggplot2}

<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Statistics</b></td>
    <td><code>stat_*()</code></td>
    <td>*The statistical transformations applied to the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Scales</b></td>
    <td><code>scale_*()</code></td>
    <td>*Maps between the data and the aesthetic dimensions.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Coordinate System</b></td>
    <td><code>coord_*()</code></td>
    <td>*Maps data into the plane of the data rectangle.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Facets</b></td>
    <td><code>facet_*()</code></td>
    <td>*The arrangement of the data into a grid of plots.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Visual Themes</b></td>
    <td><code>theme()</code> and <code>theme_*()</code></td>
    <td>*The overall visual defaults of a plot.*</td>
  </tr>
</table>


# Break<br><b style='color:#404040;font-size:.7em;font-weight:600;'>— 10 minutes —</b>


# A Basic ggplot


## `ggplot2::ggplot()`

```{r}
#| label: ggplot-function
#| eval: false
?ggplot
```

![](img/ggplot-fun-help.png){fig-alt="The help page of the ggplot() function." fig-width="175%"}


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Data —</b>


## Data

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= define data object to visualize</b><br><br>

::: incremental
-   usually specified inside `ggplot()`
-   can be specified for each layer as well
:::


## Data

```{r}
#| label: ggplot-data
#| output-location: column
ggplot(data = gm2007)
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Aesthetics —</b>


## Aesthetic Mapping

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= link variables to graphical properties</b><br><br>

::: incremental
-   positions (`x`, `y`)
-   colors (`color`, `fill`)
-   shapes (`shape`, `linetype`)
-   size (`size`)
-   transparency (`alpha`)
-   groupings (`group`)
:::


## Aesthetic Mapping

```{r}
#| label: ggplot-aesthetics-outside
#| output-location: column
#| code-line-numbers: "2|1,2"
ggplot(data = gm2007) +
  aes(x = gdpPercap, y = lifeExp)
```


## <span style='color:#4758AB;'>aes</span>thetics

. . .

`aes()` outside as component

```{r}
#| label: ggplot-aesthetics-outside-comp
#| eval: false
ggplot(data = gm2007) + aes(x = gdpPercap, y = lifeExp)
```
<br>

. . .

`aes()` inside, explicit matching

```{r}
#| label: ggplot-aesthetics-inside
#| eval: false
ggplot(data = gm2007, mapping = aes(x = gdpPercap, y = lifeExp))
```
<br>

. . .

`aes()` inside, implicit matching

```{r}
#| label: ggplot-aesthetics-inside-implicit
#| eval: false
ggplot(gm2007, aes(gdpPercap, lifeExp))
```
<br>

. . .

`aes()` inside, mixed matching

```{r}
#| label: ggplot-aesthetics-inside-mix
#| eval: false
ggplot(data = gm2007, aes(x = gdpPercap, y = lifeExp))
```


## Aesthetic Mapping

```{r}
#| label: ggplot-aesthetics-course
#| output-location: column
#| code-line-numbers: "2|1,2"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  )
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Geometrical Layers —</b>


## Geometrical Layers

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= interpret aesthetics as graphical representations</b><br><br>

::: incremental
-   points
-   lines
-   polygons
-   text labels
-   ...
:::

. . .

<b class='simple-highlight-ylw'>Data-related variables are mapped via `aes()`, all other set outside `aes()`.</b>


## Geometrical Layers

```{r}
#| label: geom-point
#| output-location: column
#| code-line-numbers: "1,2,3,4|5"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point()
```


## Layers

```{r}
#| label: geom-point-layer
#| output-location: column
#| code-line-numbers: "5,6,7,8,9|6,7,8"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  layer(
    geom = "point", 
    stat = "identity", ## do nothing
    position = "identity" ## do nothing
  )
```


## Layers

```{r}
#| label: geom-line-layer
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  layer(
    geom = "line", 
    stat = "identity", ## do nothing
    position = "identity" ## do nothing
  )
```


## Layers

```{r}
#| label: geom-smooth-layer
#| output-location: column
#| code-line-numbers: "6,7"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  layer(
    geom = "smooth", 
    stat = "smooth", 
    position = "identity" ## do nothing
  )
```


## Layers

```{r}
#| label: geom-smooth
#| output-location: column
#| code-line-numbers: "5"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_smooth()
```


## Combine Layers

::: {layout-ncol="2"}
```{r}
#| label: geom-point-smooth
#| fig-height: 3.9
#| code-line-numbers: "5,6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  geom_smooth()
```

```{r}
#| label: geom-smooth-point
#| fig-height: 3.9
#| code-line-numbers: "5,6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_smooth() +
  geom_point()
```
:::


## Visual Properties of Layers

```{r}
#| label: geom-point-properties
#| output-location: column
#| code-line-numbers: "5,6,7,8,9,10,11|6,7,8,9,10"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    color = "#28a87d",
    alpha = .5,
    shape = 8,
    stroke = 1.2,
    size = 2
  )
```


## Setting vs Mapping of Visual Properties

::: {layout-ncol="2"}
```{r}
#| label: geom-point-properties-set-color
#| fig-height: 3.9
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    color = "#28a87d"
  )
```

::: fragment
```{r}
#| label: geom-point-properties-map-color
#| fig-height: 3.9
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    aes(color = continent)
  )
```
:::
:::

## Setting vs Mapping of Visual Properties

::: {layout-ncol="2"}
```{r}
#| label: geom-point-properties-set-size
#| fig-height: 3.7
#| code-line-numbers: "6,7"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    color = "#28a87d",
    size = 3
  )
```

::: fragment
```{r}
#| label: geom-point-properties-map-size
#| fig-height: 3.7
#| code-line-numbers: "6,7"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    aes(color = continent,
        size = pop)
  )
```
:::
:::


## Mapping Expressions

```{r}
#| label: geom-point-aes-expression
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    aes(color = lifeExp >= 75),
    alpha = .5
  )
```


## Mapping Expressions

```{r}
#| label: geom-point-aes-expression-2
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    aes(color = continent != "Europe"),
    alpha = .5
  )
```


## Mapping Expressions

```{r}
#| label: geom-point-aes-expression-3
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point(
    aes(color = pop < 10^9),
    alpha = .5
  )
```


## Local vs Global Encoding

::: {layout-ncol="2"}
```{r}
#| label: geom-point-aes-geom
#| code-line-numbers: "3,6"
#| fig-height: 3.2
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp)
  ) +
  geom_line(
    aes(color = country),
    alpha = .5
  )
```

::: fragment
```{r}
#| label: geom-point-aes-global
#| code-line-numbers: "3,4"
#| fig-height: 3.2
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp,
        color = country)
  ) +
  geom_line(
    alpha = .5
  )
```
:::
:::


## Adding More Layers: Local Encoding

```{r}
#| label: geom-multiple-aes-local
#| output-location: column
#| code-line-numbers: "9,10,11"
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp)
  ) +
  geom_line(
    aes(color = country),
    alpha = .5
  ) +
  geom_smooth(
    method = "lm"
  )
```


## Adding More Layers: Global Encoding

```{r}
#| label: geom-multiple-aes-global
#| output-location: column
#| code-line-numbers: "3,4"
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp,
        color = country)
  ) +
  geom_line(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm"
  )
```


## Overwrite Global Aesthetics

```{r}
#| label: geom-multiple-aes-overwrite
#| output-location: column
#| code-line-numbers: "4,11"
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp,
        color = country)
  ) +
  geom_line(
    alpha = .5
  ) +
  geom_smooth(
    method = "lm",
    color = "black"
  )
```


## The <span style='color:#4758AB;'>group</span> Aesthetic

```{r}
#| label: geom-line-aes-ungrouped
#| output-location: column
#| code-line-numbers: "2,3|5,6,7"
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp)
  ) +
  geom_line(
    alpha = .5
  )
```


## The <span style='color:#4758AB;'>group</span> Aesthetic

```{r}
#| label: geom-line-aes-group
#| output-location: column
#| code-line-numbers: "4"
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp,
        group = country)
  ) +
  geom_line(
    alpha = .5
  )
```


## The <span style='color:#4758AB;'>group</span> Aesthetic

```{r}
#| label: geom-line-aes-group-highlight
#| output-location: column
#| code-line-numbers: "9,10,11,12,13|10|11,12"
ggplot(
    data = gm_g7,
    aes(x = year, y = lifeExp,
        group = country)
  ) +
  geom_line(
    alpha = .5
  ) +
  geom_line(
    data = filter(gm_g7, country == "Japan"),
    color = "red",
    size = 1
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-default
#| output-location: column
#| code-line-numbers: "2,3|5,6,7"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_point(
    alpha = .3
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-default-explicit
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_point(
    position = "identity",
    alpha = .3
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-jitter
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_point(
    position = "jitter",
    alpha = .3
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-jitter-function
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_point(
    position = position_jitter(),
    alpha = .3
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-jitter-function-width
#| output-location: column
#| code-line-numbers: "6,7,8"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_point(
    position = position_jitter(
      width = .2
    ),
    alpha = .3
  )
```

## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-geom-jitter
#| output-location: column
#| code-line-numbers: "5|6"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_jitter(
    width = .2,
    alpha = .3
  )
```

## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-geom-jitter-boxplot
#| output-location: column
#| code-line-numbers: "5"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_boxplot() +
  geom_jitter(
    width = .2,
    alpha = .3
  )
```

## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-geom-jitter-boxplot-outlier
#| output-location: column
#| code-line-numbers: "5,6,7"
ggplot(
    data = gm2007,
    aes(x = continent, y = gdpPercap)
  ) +
  geom_boxplot(
    outlier.shape = NA
  ) +
  geom_jitter(
    width = .2,
    alpha = .3
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

Prepare data for a bar graph example:

```{r}
#| label: position-bars-stack-data
#| freeze: false
#| code-line-numbers: "1|2|3,4"
#| purl: false
gm_bars <- filter(
  gapminder, 
  country %in% c("United States", "Canada"), 
  year > 1999
)
```


## The <span style='color:#4758AB;'>position</span> Argument

Prepare data for a bar graph example

```{r}
#| label: position-bars-stack-data-print
#| code-line-numbers: "6"
gm_bars <- filter(
  gapminder, 
  country %in% c("United States", "Canada"), 
  year > 1999
)

gm_bars
```

## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-bars-stack
#| output-location: column
#| code-line-numbers: "2,3|5,6,7"
ggplot(
    data = gm_bars,
    aes(x = year, y = gdpPercap)
  ) +
  geom_col(
    aes(fill = country)
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-bars-stack-factor
#| output-location: column
#| code-line-numbers: "3"
ggplot(
    data = gm_bars,
    aes(x = factor(year), y = gdpPercap)
  ) +
  geom_col(
    aes(fill = country)
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-bars-stack-explicit
#| output-location: column
#| code-line-numbers: "7"
ggplot(
    data = gm_bars,
    aes(x = factor(year), y = gdpPercap)
  ) +
  geom_col(
    aes(fill = country),
    position = "stack"
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-bars-dodge
#| output-location: column
#| code-line-numbers: "7"
ggplot(
    data = gm_bars,
    aes(x = factor(year), y = gdpPercap)
  ) +
  geom_col(
    aes(fill = country),
    position = "dodge"
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-bars-dodge-width
#| output-location: column
#| code-line-numbers: "8"
ggplot(
    data = gm_bars,
    aes(x = factor(year), y = gdpPercap)
  ) +
  geom_col(
    aes(fill = country),
    position = "dodge",
    width = .6
  )
```


## The <span style='color:#4758AB;'>position</span> Argument

```{r}
#| label: position-bars-dodge-function
#| output-location: column
#| code-line-numbers: "7,8,9|8,10"
ggplot(
    data = gm_bars,
    aes(x = factor(year), y = gdpPercap)
  ) +
  geom_col(
    aes(fill = country),
    position = position_dodge(
      width = .7
    ),
    width = .6
  )
```



# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Labels —</b>


## Labels

```{r}
#| label: labels-default
#| output-location: column
#| code-line-numbers: "1,2,3,4,5,6|3,4,5|7,8,9"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) 
```


## Overwrite Axis Titles

```{r}
#| label: titles-axes
#| output-location: column
#| code-line-numbers: "11,12"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "GDP per capita (US$, inflation-adjusted)",
    y = "Life expectancy at birth (years)"
  )
```


## Overwrite Legend Titles

```{r}
#| label: titles-legend
#| output-location: column
#| code-line-numbers: "13,14"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "GDP per capita (US$, inflation-adjusted)",
    y = "Life expectancy at birth (years)",
    color = "Continent:",
    size = "Population:"
  )
```


## Remove Titles

```{r}
#| label: titles-remove
#| output-location: column
#| code-line-numbers: "12,13"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "GDP per capita (US$, inflation-adjusted)",
    y = NULL,
    color = NULL,
    size = "Population:"
  )
```


## Remove Titles

```{r}
#| label: titles-remove-empty-quotes
#| output-location: column
#| code-line-numbers: "12"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "GDP per capita (US$, inflation-adjusted)",
    y = "",
    color = NULL,
    size = "Population:"
  )
```


## Add Plot Title + Caption

```{r}
#| label: titles-plot
#| output-location: column
#| code-line-numbers: "15,16"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "GDP per capita (US$, inflation-adjusted)",
    y = "Life expectancy at birth (years)",
    color = "Continent:",
    size = "Population:",
    title = "Health & Income of Nations in 2007",
    caption = "Source: Gapminder project"
  )
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Export Your Graphics —</b>


## Save the Graphic

<br>

```{r}
#| label: ggplot-save
#| eval: false
ggsave(g, filename = "my_plot.png")
```

. . .

```{r}
#| label: ggplot-save-implicit
#| eval: false
ggsave("my_plot.png")
```

. . .

```{r}
#| label: ggplot-save-aspect
#| eval: false
ggsave("my_plot.png", width = 8, height = 5, dpi = 600)
```

. . .

```{r}
#| label: ggplot-save-vector
#| eval: false
ggsave("my_plot.pdf", width = 20, height = 12, unit = "cm", device = cairo_pdf)
```


---

<br>

![Modified from canva.com](img/vector-raster-canva.png){fig-alt="A comparison of vector and raster graphics." fig-width="150%"}


## How to Work with Aspect Ratios

::: incremental
-   don't rely on the Rstudio viewer pane!
-   once you have a "it's getting close" prototype, settle on a plot size<br><br>
-   **Approach 1:** save the file to disk and inspect it; go back to your IDE
    -   tedious and time-consuming...<br><br>
-   **Approach 2:** use a qmd or rmd with inline output and chunk settings
    -   set `fig.width` and `fig.height` per chunk or globally<br><br>
-   **Approach 3:** use our [{camcorder} package](https://github.com/thebioengineer/camcorder)
    -   saves output from all `ggplot()` calls and displays it in the viewer pane
:::


## Setting Plot Sizes in Rmd's

![](img/plot-size-rmarkdown-example.png){fig-alt="A screenshot of an exemplary Rmd file with two chunks with different settings of fig.width and fig.height." fig-width="60%"}


## Setting Plot Sizes via {camcorder}

<br>

![](img/plot-size-camcorder-example.png){fig-alt="A screenshot of an exemplary R script with a plot automatically saved and displayed in correct aspect ratio thanks to the camcorder package." fig-width="120%"}



# Exercise


## Your Turn: A Basic ggplot

::: exercise
::: {.incremental}
-   **Create a time series (line chart) of GDP per capita for Oceanian countries**
    -   What is the difference between `geom_line()` and `geom_path()`?
    -   Map the color of the lines to `country`.
    -   Add points for each observation.
    -   Encode the points with the same colors.
    -   Turn the points into diamonds.
    -   Add meaningful titles to your plot.
    -   **Bonus:** Use different point shapes for each country.
:::
:::


## Your Turn: Data Preparation

<br>

```{r}
#| label: exercise-timeseries-data-import
#| purl: false
gm_oceania <- readr::read_csv("./data/gapminder_oceania.csv")
```

<br>

. . .

```{r}
#| label: exercise-timeseries-data-prep
#| freeze: false
#| purl: false
gm_oceania <- filter(gapminder, continent == "Oceania")
```


## Your Turn: Geometrical Layers

```{r}
#| label: exercise-timeseries-1-data
#| output-location: column
#| code-line-numbers: "2|3|5"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap)
  ) +
  geom_line()
```

```{r}
#| label: exercise-timeseries-data-inside
#| output-location: column
#| code-line-numbers: "2,3,4"
#| purl: false
ggplot(
    data = filter(
      gapminder, continent == "Oceania"
    ),
    aes(x = year, y = gdpPercap)
  ) +
  geom_line()
```


## Your Turn: Geometrical Layers

::: {layout-ncol="2"}
```{r}
#| label: exercise-timeseries-line
#| fig-height: 4.3
#| code-line-numbers: "5"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap)
  ) +
  geom_line()
```

::: fragment
```{r}
#| label: exercise-timeseries-path
#| fig-height: 4.3
#| code-line-numbers: "5"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap)
  ) +
  geom_path()
```
:::
:::


## Your Turn: Aesthetics

```{r}
#| label: exercise-timeseries-2-line
#| output-location: column
#| code-line-numbers: "5,7|6"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap)
  ) +
  geom_line(
    aes(color = country)
  )
```


## Your Turn: Combine Geometries

```{r}
#| label: exercise-timeseries-3-point
#| output-location: column
#| code-line-numbers: "8"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap)
  ) +
  geom_line(
    aes(color = country)
  ) +
  geom_point()
```


## Your Turn: Local vs Global Aesthetics

```{r}
#| label: exercise-timeseries-4-color-local
#| output-location: column
#| code-line-numbers: "9|3,6,9"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap)
  ) +
  geom_line(
    aes(color = country)
  ) +
  geom_point(
    aes(color = country)
  )
```


## Your Turn: Local vs Global Aesthetics

```{r}
#| label: exercise-timeseries-color-global
#| output-location: column
#| code-line-numbers: "3,4,6,7|3,4"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap,
        color = country)
  ) +
  geom_line() +
  geom_point()
```


## Your Turn: Properties of Layers

```{r}
#| label: exercise-timeseries-5-diamonds
#| output-location: column
#| code-line-numbers: "8|9"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap,
        color = country)
  ) +
  geom_line() +
  geom_point(
    shape = "diamond",
    size = 4
  )
```


## Your Turn: Properties of Layers

```{r}
#| label: exercise-timeseries-6-diamonds
#| output-location: column
#| code-line-numbers: "8"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap,
        color = country)
  ) +
  geom_line() +
  geom_point(
    shape = 18,
    size = 4
  )
```

---

![Source: [Albert's Blog](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/)](img/shapes-type.png){fig-alt="An overview of a set of available shapes, ordered by their type of shape (e.g. points, triangles etc)." fig-width="150%"}


## Your Turn: Labels

```{r}
#| label: exercise-timeseries-7-labs
#| output-location: column
#| code-line-numbers: "11,12,13,14,15,16"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap,
        color = country)
  ) +
  geom_line() +
  geom_point(
    shape = 18,
    size = 4
  ) +
  labs(
    x = "Year", 
    y = "GDP per capita",
    color = NULL,
    title = "Trends in Income of Oceanian Countries"
  )
```


## Your Turn: Aesthetics (Bonus)

```{r}
#| label: exercise-timeseries-8-shape
#| output-location: column
#| code-line-numbers: "8|9"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap,
        color = country)
  ) +
  geom_line() +
  geom_point(
    aes(shape = country),
    size = 3
  ) +
  labs(
    x = "Year", 
    y = "GDP per capita",
    color = NULL,
    title = "Trends in Income of Oceanian Countries"
  )
```


## Your Turn: Aesthetics (Bonus)

```{r}
#| label: exercise-timeseries-9-fix-legend
#| output-location: column
#| code-line-numbers: "15"
#| purl: false
ggplot(
    data = gm_oceania,
    aes(x = year, y = gdpPercap,
        color = country)
  ) +
  geom_line() +
  geom_point(
    aes(shape = country),
    size = 3
  ) +
  labs(
    x = "Year", 
    y = "GDP per capita",
    color = NULL,
    shape = NULL,
    title = "Trends in Income of Oceanian Countries"
  )
```


# Break<br><b style='color:#404040;font-size:.7em;font-weight:600;'>— 10 minutes —</b>


# A Polished ggplot

```{r}
#| label: theme-default
#| echo: false
#| freeze: false
#| purl: false
theme_set(theme_grey(base_size = 11, base_family = "Roboto Condensed"))
```



## Store a ggplot as Object

```{r}
#| label: ggplot-object
#| code-line-numbers: "1,19"
g <-
  ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp,
        color = continent, 
        size = pop)
  ) +
  geom_point(
    alpha = .5
  ) +
  labs(
    x = "GDP per capita",
    y = "Life expectancy",
    color = NULL,
    size = "Population:",
    title = "Health & Income of Nations in 2007"
  )

class(g)
```


## Print a ggplot Object

```{r}
#| label: ggplot-object-print
#| fig.width: 10
#| fig.height: 5.5
#| fig-align: "center"
g
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Theming —</b>


## Theming

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= stylistic changes of non-data elements</b><br><br>

::: incremental
-   complete themes plus custom theme adjustments
-   either add complete themes to a plot or set a theme globally via `theme_*()`
-   afterwards, theme settings can be overwritten via `theme()`
:::


## Add a Complete Theme

```{r}
#| label: theme-light
#| fig.width: 10
#| fig.height: 5.5
#| fig-align: "center"
g + theme_light()
```


## Add a Complete Theme

```{r}
#| label: theme-minimal
#| fig.width: 10
#| fig.height: 5.5
#| fig-align: "center"
g + theme_minimal()
```


## Add a Complete Theme

```{r}
#| label: theme-classic
#| fig.width: 10
#| fig.height: 5.5
#| fig-align: "center"
g + theme_classic()
```


## Add a Complete Theme

```{r}
#| label: theme-void
#| fig.width: 10
#| fig.height: 5.5
#| fig-align: "center"
g + theme_void()
```


## Adjust Theme Base Settings

```{r}
#| label: theme-base-settings
#| output-location: column
#| code-line-numbers: "1,2,3,4|2,3"
g + theme_light(
  base_size = 13,
  base_family = "Asap Condensed"
)
```


## Set a Complete Theme Globally

```{r}
#| label: ggplot-theme-global
#| output-location: column
#| purl: false
theme_set(theme_light())
```


## Set a Complete Theme Globally

```{r}
#| label: ggplot-theme-global-plot
#| output-location: column
#| code-line-numbers: "3"
theme_set(theme_light())

g
```


## Adjust Theme Base Settings

```{r}
#| label: ggplot-theme-global-base
#| freeze: false
#| output-location: column
#| code-line-numbers: "1,2,3,4|2,3"
#| purl: false
theme_set(theme_light(
  base_size = 13,
  base_family = "Asap Condensed"
))
```


## Adjust Theme Base Settings

```{r}
#| label: ggplot-theme-global-base-plot
#| freeze: false
#| output-location: column
#| code-line-numbers: "6"
theme_set(theme_light(
  base_size = 13,
  base_family = "Asap Condensed"
))

g
```


## <span style='color:#4758AB;'>{systemfonts}</span>

```{r}
#| label: systemfonts
#| code-line-numbers: "1,2|4,5,6,7,8"
library(systemfonts)

system_fonts() %>%
  filter(stringr::str_detect(family, "Asap")) %>%
  pull(family) %>%
  unique() %>% 
  sort()
```


## Overwrite Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-0
#| output-location: column
#| code-line-numbers: "2"
g +
  theme()
```


## Overwrite Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-1
#| output-location: column
#| code-line-numbers: "2,4|3"
g +
  theme(
    panel.grid.minor = element_blank()
  )
```


## Overwrite Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-2
#| output-location: column
#| code-line-numbers: "4"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold")
  )
```


## Overwrite Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-3
#| output-location: column
#| code-line-numbers: "5"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot"
  )
```


## Overwrite Theme Settings

```{r}
#| label: ggplot-theme-settings-individual-4
#| output-location: column
#| code-line-numbers: "6,7,8"
g +
  theme(
    panel.grid.minor = element_blank(),
    plot.title = element_text(face = "bold"),
    plot.title.position = "plot",
    panel.background = element_rect(
      fill = "#f8f8f8", color = NA
    )
  )
```


## Overwrite Theme Settings Globally

```{r}
#| label: ggplot-theme-settings-global
#| output-location: column
#| code-line-numbers: "1,8|2,3,4,5,6,7"
theme_update(
  panel.grid.minor = element_blank(),
  plot.title = element_text(face = "bold"),
  plot.title.position = "plot",
  panel.background = element_rect(
    fill = "#f8f8f8", color = NA
  )
)
```


## Overwrite Theme Settings Globally

```{r}
#| label: ggplot-theme-settings-global-print
#| output-location: column
#| code-line-numbers: "10"
theme_update(
  panel.grid.minor = element_blank(),
  plot.title = element_text(face = "bold"),
  plot.title.position = "plot",
  panel.background = element_rect(
    fill = "#f8f8f8", color = NA
  )
)

g
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Facets —</b>


## Facets

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= split variables to multiple panels</b><br><br>

. . .

Facets are also known as:

-   small multiples
-   trellis graphs
-   lattice plots
-   conditioning


---

::: {layout-ncol="2"}
```{r}
#| label: facet-types-wrap
#| echo: false
#| purl: false
register_variant(
  name = "Cabinet Grotesk Bold S01",
  family = "Cabinet Grotesk",
  weight = "bold",
  features = font_feature(letters = "stylistic")
)

register_variant(
  name = "Cabinet Grotesk Regular S01",
  family = "Cabinet Grotesk",
  weight = "normal",
  features = font_feature(letters = "stylistic")
)

data_wrap <- tibble::tibble(
  var1 = c("Group A", "Group B", "Group C", "Group D"),
  var2 = c("Group 1", "Group 2", "Group 3", "Group 4")
)

ggplot(data_wrap, aes(x = 1, y = 1)) +
  geom_text(
    aes(label = paste0("Subset for ", stringr::str_sub(var1, 7, 8))),
    size = 5, family = "Cabinet Grotesk Regular S01", lineheight = .9
  ) +
  facet_wrap(~var1) +
  ggtitle("facet_wrap()") +
  theme_bw(base_size = 24) +
  theme(
    plot.title = element_text(hjust = .5, family = "Spline Sans Mono", face = "bold"),
    strip.text = element_text(family = "Cabinet Grotesk Bold S01", size = 18),
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    axis.title = element_blank(),
    plot.background = element_rect(fill = "#f8f8f8", color = NA),
    plot.margin = margin(t = 3, r = 25)
  )
```

::: fragment
```{r}
#| label: facet-types-grid
#| echo: false
#| purl: false
data_grid <- tibble(
  var1 = c("Category A", "Category A", "Category B", "Category B"),
  var2 = c("Category 1", "Category 2", "Category 1", "Category 2"),
  label = c("Subset for A × 1", "Subset for A × 2",
            "Subset for B × 1", "Subset for B × 2")
)

ggplot(data_grid, aes(x = 1, y = 1)) +
 geom_text(
    aes(label = label),
    size = 5, family = "Cabinet Grotesk Regular S01", lineheight = .9
  ) +
  facet_grid(var2 ~ var1) +
  ggtitle("facet_grid()") +
  theme_bw(base_size = 24) +
  theme(
    plot.title = element_text(hjust = .5, family = "Spline Sans Mono", face = "bold"),
    strip.text = element_text(family = "Cabinet Grotesk Bold S01", size = 18),
    panel.grid = element_blank(),
    axis.ticks = element_blank(),
    axis.text = element_blank(),
    axis.title = element_blank(),
    plot.background = element_rect(fill = "#f8f8f8", color = NA),
    plot.margin = margin(t = 3, l = 25)
  )
```
:::
:::


## Wrapped Facets

```{r}
#| label: facet-wrap
#| output-location: column
#| code-line-numbers: "1,2,3,4|2,4|3"
g +
  facet_wrap(
    vars(continent)
  )
```


## Wrapped Facets

```{r}
#| label: facet-wrap-circumflex
#| output-location: column
#| code-line-numbers: "3"
g +
  facet_wrap(
    ~ continent
  )
```


## Facet Options: Cols + Rows

```{r}
#| label: facet-wrap-options-ncol
#| output-location: column
#| code-line-numbers: "4"
g +
  facet_wrap(
    ~ continent,
    ncol = 1
  )
```


## Facet Options: Cols + Rows

```{r}
#| label: facet-wrap-options-ncol-2
#| output-location: column
#| code-line-numbers: "4"
g +
  facet_wrap(
    ~ continent,
    ncol = 2
  )
```


## Facet Options: Free Scaling

```{r}
#| label: facet-free-scales
#| output-location: column
#| code-line-numbers: "5"
g +
  facet_wrap(
    ~ continent,
    ncol = 2,
    scales = "free"
  )
```


## Facet Options: Free Scaling

```{r}
#| label: facet-free-scale-y
#| output-location: column
#| code-line-numbers: "5"
g +
  facet_wrap(
    ~ continent,
    ncol = 2,
    scales = "free_y"
  )
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Scales —</b>


## Scales

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= translate between variable and property ranges</b><br><br>

::: incremental
-   feels-like temperature ⇄ x
-   reported bike shares ⇄ y
-   season ⇄ color
-   year ⇄ shape
-   ...
:::


## Scales

The `scale_*()` components control the properties of all the<br><b class='simple-highlight-ylw'>aesthetic dimensions mapped to the data.</b>

<br>Consequently, there are `scale_*()` functions for all aesthetics such as:

-   **positions** via `scale_x_*()` and `scale_y_*()`

-   **colors** via `scale_color_*()` and `scale_fill_*()`

-   **sizes** via `scale_size_*()` and `scale_radius_*()`

-   **shapes** via `scale_shape_*()` and `scale_linetype_*()`

-   **transparency** via `scale_alpha_*()`


## Scales

The `scale_*()` components control the properties of all the<br><b class='simple-highlight-ylw'>aesthetic dimensions mapped to the data.</b>

<br>The extensions (`*`) can be filled by e.g.:

-   `continuous()`, `discrete()`, `reverse()`, `log10()`, `sqrt()`, `date()` for positions

-   `continuous()`, `discrete()`, `manual()`, `gradient()`, `gradient2()`, `brewer()` for colors

-   `continuous()`, `discrete()`, `manual()`, `ordinal()`, `area()`, `date()` for sizes

-   `continuous()`, `discrete()`, `manual()`, `ordinal()` for shapes

-   `continuous()`, `discrete()`, `manual()`, `ordinal()`, `date()` for transparency


## Continuous vs Discrete in {ggplot2}

::: {layout-ncol="2"}
## Continuous:<br>quantitative or numerical data

-   height
-   weight
-   age
-   counts

## Discrete:<br>qualitative or categorical data

-   species
-   sex
-   study sites
-   age group
:::


## Continuous vs Discrete in {ggplot2}

::: {layout-ncol="2"}
## Continuous:<br>quantitative or numerical data

-   height (continuous)
-   weight (continuous)
-   age (continuous or discrete)
-   counts (discrete)

## Discrete:<br>qualitative or categorical data

-   species (nominal)
-   sex (nominal)
-   study site (nominal or ordinal)
-   age group (ordinal)
:::


## Aesthetics + Scales

```{r}
#| label: scales-default
#| output-location: column
#| code-line-numbers: "3,4,5,6,9,10,11,12|3,9|4,10|5,11|6,12"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, 
        y = lifeExp,
        color = continent,
        size = pop)
  ) +
  geom_point() +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete() +
  scale_size()
```


## Aesthetics + Scales

```{r}
#| label: scales-default-2
#| output-location: column
#| code-line-numbers: "1,2,3,4,5,6,7|3,8|5,10"
ggplot(
    data = gm2007,
    aes(x = continent, 
        y = lifeExp,
        color = gdpPercap)
  ) +
  geom_jitter(width = .2) +
  scale_x_discrete() +
  scale_y_continuous() +
  scale_color_continuous()
```


## Aesthetics + Scales

```{r}
#| label: scales-default-g
#| output-location: column
g +
  scale_x_continuous() +
  scale_y_continuous() +
  scale_color_discrete() +
  scale_size()
```


## Overwrite Scales

```{r}
#| label: scales-overwrite
#| output-location: column
#| code-line-numbers: "2|3|4|5"
g +
  scale_x_log10() +
  scale_y_binned() +
  scale_color_viridis_d() +
  scale_size_area()
```


## Modify Position Scales

```{r}
#| label: scales-modify-x-1
#| output-location: column
#| code-line-numbers: "3"
g +
  scale_x_log10( 
    labels = scales::label_comma()
  ) +
  scale_y_continuous() +
  scale_color_discrete() +
  scale_size()
```


## Modify Position Scales

```{r}
#| label: scales-modify-x-2
#| output-location: column
#| code-line-numbers: "4|6"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous() +
  scale_color_discrete() +
  scale_size()
```


## Modify Scales

```{r}
#| label: scales-modify-y-1
#| output-location: column
#| code-line-numbers: "6,7,8|7"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA),
  ) +
  scale_color_discrete() +
  scale_size()
```


## Modify Position Scales

```{r}
#| label: scales-modify-y-2
#| output-location: column
#| code-line-numbers: "7"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(60, 75)
  ) +
  scale_color_discrete() +
  scale_size()
```


## Modify Position Scales

```{r}
#| label: scales-modify-y-3
#| output-location: column
#| code-line-numbers: "8|7,8|10"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA),
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_discrete() +
  scale_size()
```


## Modify Color Scales

```{r}
#| label: scales-modify-color-1
#| output-location: column
#| code-line-numbers: "10,11,12"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA),
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_discrete(
    type = continent_colors
  ) +
  scale_size()
```


## <span style='color:#4758AB;'>continent_colors</span>

```{r}
#| label: continent-colors
gapminder::continent_colors
```


## Modify Color Scales

```{r}
#| label: scales-modify-color-2
#| output-location: column
#| code-line-numbers: "10,11,12"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA), 
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_manual(
    values = continent_colors
  ) +
  scale_size()
```


## Brewer Palettes

![](img/rcolorbrewer.png){fig-align="center"}


## Modify Color Scales

```{r}
#| label: scales-modify-color-3
#| output-location: column
#| code-line-numbers: "10,11,12|11|13"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA),
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_brewer(
    palette = "Dark2"
  ) +
  scale_size()
```


## Modify Color Scales

```{r}
#| label: scales-modify-size-1
#| output-location: column
#| code-line-numbers: "13,14,15|14"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA), 
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_brewer(
    palette = "Dark2"
  ) +
  scale_size(
    range = c(1, 9)
  )
```


## Modify Size Scales

```{r}
#| label: scales-modify-size-2
#| output-location: column
#| code-line-numbers: "15"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA), 
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_brewer(
    palette = "Dark2"
  ) +
  scale_size(
    range = c(1, 9),
    breaks = 1:4*250000000
  )
```


## Modify Size Scales

```{r}
#| label: scales-modify-size-3
#| output-location: column
#| code-line-numbers: "16,17,18,19|17,18"
g +
  scale_x_log10(
    labels = scales::label_comma(),
    name = "GDP per capita (log scale)"
  ) +
  scale_y_continuous(
    limits = c(35, NA), 
    breaks = seq(30, 85, by = 5)
  ) +
  scale_color_brewer(
    palette = "Dark2"
  ) +
  scale_size(
    range = c(1, 9),
    breaks = 1:4*250000000, 
    labels = scales::label_comma(
      scale = 1 / 10^6,
      suffix = "M"
    )
  )
```


# <b style='color:#404040;font-size:.7em;font-weight:600;'>— Coordinate Systems —</b>


## Coordinate Systems

<br>

<b class='simple-highlight-grn' style='font-size:2.6rem;'>= interpret the position aesthetics</b><br><br>

::: incremental
-   **linear coordinate systems:** preserve the geometrical shapes
    -   `coord_cartesian()`
    -   `coord_fixed()`
    -   `coord_flip()`
-   **non-linear coordinate systems:** likely change the geometrical shapes
    -   `coord_polar()`
    -   `coord_trans()`
    -   `coord_map()` and `coord_sf()`
:::


## Cartesian Coordinate System

```{r}
#| label: coord-cartesian
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = continent, y = lifeExp)
  ) +
  geom_boxplot() +
  coord_cartesian()
```


## Cartesian Coordinate System

```{r}
#| label: coord-cartesian-zoom
#| output-location: column
#| code-line-numbers: "6,7,8"
ggplot(
    data = gm2007,
    aes(x = continent, y = lifeExp)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(60, NA)
  )
```


## Changing Limits

::: {layout-ncol="2"}
```{r}
#| label: coord-cartesian-ylim
#| fig-height: 3.5
#| code-line-numbers: "6,7,8"
ggplot(
    data = gm2007,
    aes(x = continent, y = lifeExp)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(60, NA)
  )
```

::: fragment
```{r}
#| label: scale-y-limits
#| fig-height: 3.5
#| code-line-numbers: "6,7,8"
ggplot(
    data = gm2007,
    aes(x = continent, y = lifeExp)
  ) +
  geom_boxplot() +
  scale_y_continuous(
    limits = c(60, NA)
  )
```
:::
:::


## Clipping

```{r}
#| label: coord-clip
#| output-location: column
#| code-line-numbers: "8"
ggplot(
    data = gm2007,
    aes(x = continent, y = lifeExp)
  ) +
  geom_boxplot() +
  coord_cartesian(
    ylim = c(60, NA),
    clip = "off"
  )
```


## Remove All Padding

```{r}
#| label: coord-expand-off-clip
#| output-location: column
#| code-line-numbers: "7|8"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  coord_cartesian(
    expand = FALSE,
    clip = "off"
  )
```


## Fixed Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-fixed
#| fig-height: 4.2
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  coord_fixed()
```

::: fragment
```{r}
#| label: coord-fixed-custom
#| fig-height: 4.2
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  coord_fixed(ratio = 2000)
```
:::
:::


## Flipped Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-cartesian-comp-flip
#| fig-height: 4.1
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = continent)
  ) +
  geom_bar() +
  coord_cartesian()
```

::: fragment
```{r}
#| label: coord-flip
#| fig-height: 4.1
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = continent)
  ) +
  geom_bar() +
  coord_flip()
```
:::
:::


## Flipped Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-cartesian-switch-x-y
#| fig-height: 4.1
#| code-line-numbers: "3,6"
ggplot(
    data = gm2007,
    aes(y = continent)
  ) +
  geom_bar() +
  coord_cartesian()
```

```{r}
#| label: coord-flip-again
#| fig-height: 4.1
#| code-line-numbers: "3,6"
ggplot(
    data = gm2007,
    aes(x = continent)
  ) +
  geom_bar() +
  coord_flip()
```
:::


## Reminder: Sort Your Bars!

```{r}
#| label: forcats-sort-infreq
#| output-location: column
#| code-line-numbers: "1,5"
library(forcats)

ggplot(
    data = gm2007,
    aes(y = fct_infreq(continent))
  ) +
  geom_bar()
```


## Reminder: Sort Your Bars!

```{r}
#| label: forcats-sort-infreq-rev
#| output-location: column
#| code-line-numbers: "3,4,5"
ggplot(
    data = gm2007,
    aes(y = fct_rev(
      fct_infreq(continent)
    ))
  ) +
  geom_bar()
```


## Circular Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-polar-x
#| fig-height: 3.9
#| code-line-numbers: "7"
ggplot(
    data = gm2007,
    aes(y = continent)
  ) +
  geom_bar() +
  coord_polar()
```

::: fragment
```{r}
#| label: coord-polar-y
#| fig-height: 3.9
#| code-line-numbers: "7"
ggplot(
    data = gm2007,
    aes(y = continent)
  ) +
  geom_bar() +
  coord_polar(theta = "y")
```
:::
:::


## Circular Cordinate System

::: {layout-ncol="2"}
```{r}
#| label: coord-polar-pie
#| fig-height: 3.9
#| code-line-numbers: "4,6,7"
ggplot(
    data = gm2007,
    aes(y = 1,
        fill = fct_infreq(continent))
  ) +
  geom_bar(position = "stack") +
  coord_polar(direction = -1)
```

::: fragment
```{r}
#| label: coord-cartesian-comp-polar
#| fig-height: 3.9
#| code-line-numbers: "4,6,7"
ggplot(
    data = gm2007,
    aes(y = 1,
        fill = fct_infreq(continent))
  ) +
  geom_bar(position = "stack") +
  coord_cartesian()
```
:::
:::


## Transform a Coordinate System

```{r}
#| label: coord-trans-log
#| output-location: column
#| code-line-numbers: "6"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  coord_trans(x = "log10")
```


## Transform a Coordinate System

::: {layout-ncol="2"}
```{r}
#| label: trans-log-via-coord
#| fig-height: 3.6
#| code-line-numbers: "7"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  geom_smooth() +
  coord_trans(x = "log10")
```

::: fragment
```{r}
#| label: trans-log-via-scale
#| fig-height: 3.6
#| code-line-numbers: "7"
ggplot(
    data = gm2007,
    aes(x = gdpPercap, y = lifeExp)
  ) +
  geom_point() +
  geom_smooth() +
  scale_x_log10()
```
:::
:::


# Exercise

## Your Turn: A Polished ggplot

::: exercise
**Create the following small multiples of slope charts as close as possible**

```{r}
#| label: exercise-2
#| echo: false
#| fig.width: 10.2
#| fig.height: 5
#| purl: false
gapminder %>% 
  filter(year %in% c(1987, 2007)) %>%
  ggplot(aes(y = lifeExp, x = factor(year))) + 
  geom_line(aes(group = country), alpha = .3) +
  geom_point(aes(fill = gdpPercap), shape = 21) +
  facet_wrap(~fct_reorder(continent, lifeExp), nrow = 1) + 
  scale_y_continuous(breaks = 7:17*5, limits = c(34, 85),
                     #sec.axis = dup_axis(name = NULL, breaks = seq(70, 85, by = 5))) +
                     sec.axis = dup_axis(name = NULL)) +
  scale_fill_distiller(palette = "Spectral", direction = 1, 
                       labels = scales::label_dollar()) + #, trans = "log10") +
  coord_cartesian(expand = FALSE, clip = "off") + 
  labs(x = NULL, y = "Life expectation at birth", 
       fill = "GDP per capita:",
       title = "Life expectancy has risen in most countries within the last 20 years",
       subtitle = "However, several African countries, especially in the South, such as Zimbabwe, Eswatini, Botswana, Namibia and South Africa have experienced\na considerable drop. Away from Africa, only Iraq and DR Korea (Asia), and Montenegro (Europe) are the only countries with a negative trend.",
       caption = "Source: Gapminder project") + 
  theme_minimal(base_family = "Asap Condensed", base_size = 14) + 
  theme(panel.grid.minor = element_blank(),  
        plot.title = element_text(face = "bold", size = 24),
        plot.subtitle = element_text(color = "grey35"),
        plot.title.position = "plot",
        plot.caption.position = "plot",
        strip.text = element_text(size = 17), 
        panel.spacing = unit(2, "lines"),
        legend.key.height = unit(2.5, "lines"))
```
:::


## Your Turn: Data Preparation

```{r}
#| label: exercise-facet-slopes-data-prep
#| purl: false
gapminder %>% 
  filter(year %in% c(1987, 2007))
```


## Your Turn: Slope Chart

```{r}
#| label: exercise-facet-slopes-1-basic-chart
#| eval: false
#| code-line-numbers: "3,4,5"
#| purl: false
gapminder %>% 
  filter(year %in% c(1987, 2007)) %>%
  ggplot(aes(y = lifeExp, x = factor(year))) + 
  geom_line(aes(group = country), alpha = .3) +
  geom_point(aes(fill = gdpPercap), shape = 21)
```


## Your Turn: Slope Chart

```{r}
#| label: exercise-facet-slopes-1-basic-chart
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
```


## Your Turn: Small Multiples

```{r}
#| label: exercise-facet-slopes-2-facet
#| eval: false
#| code-line-numbers: "6"
#| purl: false
gapminder %>% 
  filter(year %in% c(1987, 2007)) %>%
  ggplot(aes(y = lifeExp, x = factor(year))) + 
  geom_line(aes(group = country), alpha = .3) +
  geom_point(aes(fill = gdpPercap), shape = 21) +
  facet_wrap(~continent)
```


## Your Turn: Small Multiples

```{r}
#| label: exercise-facet-slopes-2-facet
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
```


## Your Turn: Small Multiples

```{r}
#| label: exercise-facet-slopes-3-facet-custom
#| eval: false
#| code-line-numbers: "6"
#| purl: false
gapminder %>% 
  filter(year %in% c(1987, 2007)) %>%
  ggplot(aes(y = lifeExp, x = factor(year))) + 
  geom_line(aes(group = country), alpha = .3) +
  geom_point(aes(fill = gdpPercap), shape = 21) +
  facet_wrap(~fct_reorder(continent, lifeExp), nrow = 1)
```


## Your Turn: Small Multiples

```{r}
#| label: exercise-facet-slopes-3-facet-custom
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
```


## Your Turn: Scales + Coordinate System

```{r}
#| label: exercise-facet-slopes-4-scales-coord
#| code-line-numbers: "7|8,9,10,11|12,13,14,15|15"
#| purl: false
gapminder %>% 
  filter(year %in% c(1987, 2007)) %>%
  ggplot(aes(y = lifeExp, x = factor(year))) + 
  geom_line(aes(group = country), alpha = .3) +
  geom_point(aes(fill = gdpPercap), shape = 21) +
  facet_wrap(~fct_reorder(continent, lifeExp), nrow = 1) + 
  coord_cartesian(expand = FALSE, clip = "off") + 
  scale_y_continuous(
    breaks = 7:17*5, limits = c(34, 85),
    sec.axis = dup_axis(name = NULL)
  ) +
  scale_fill_distiller(
    palette = "Spectral", direction = 1, 
    labels = scales::label_dollar()
  ) -> g_slope
```


## Your Turn: Scales + Coordinate System

```{r}
#| label: exercise-facet-slopes-4-scales-coord-print
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
g_slope
```


## Your Turn: Theming

```{r}
#| label: exercise-facet-slopes-5-theming-1
#| eval: false
#| code-line-numbers: "1|2"
#| purl: false
g_slope + 
  theme_minimal(base_family = "Asap Condensed", base_size = 14)
```


## Your Turn: Theming

```{r}
#| label: exercise-facet-slopes-5-theming-1
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
```


## Your Turn: Theming

```{r}
#| label: exercise-facet-slopes-6-theming-2
#| code-line-numbers: "3,4,5,6,7,8,9,10,11,12"
#| purl: false
g_slope + 
  theme_minimal(base_family = "Asap Condensed", base_size = 14) + 
  theme(
    panel.grid.minor = element_blank(),  
    plot.title = element_text(face = "bold", size = 24),
    plot.subtitle = element_text(color = "grey35"),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    strip.text = element_text(size = 17), 
    panel.spacing = unit(2, "lines"),
    legend.key.height = unit(2.5, "lines")
  ) -> g_slope_themed
```


## Your Turn: Theming

```{r}
#| label: exercise-facet-slopes-6-theming-2-print
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
g_slope_themed
```


## Your Turn: Labels + Titles

```{r}
#| label: exercise-facet-slopes-7-labs
#| eval: false
#| code-line-numbers: "1|2,3,4,5,6,7,8,9|9"
#| purl: false
g_slope_themed + 
  labs(
    x = NULL, 
    y = "Life expectation at birth", 
    fill = "GDP per capita:",
    title = "Life expectancy has risen in most countries within the last 20 years",
    subtitle = "However, several African countries, especially in the South, such as Zimbabwe, Eswatini, Botswana, Namibia and South Africa have experienced\na considerable drop. Away from Africa, only Iraq and DR Korea (Asia), and Montenegro (Europe) are the only countries with a negative trend.",
    caption = "Source: Gapminder project"
  )
```


## Your Turn: Labels + Titles

```{r}
#| label: exercise-facet-slopes-7-labs
#| echo: false
#| fig.width: 10.2
#| fig.height: 5.9
#| fig-align: "center"
#| purl: false
```


# Wrap-Up


## The Components of {ggplot2}

<br>
<table style='width:100%;font-size:14pt;'>
  <tr>
    <th>Component</th>
    <th>Function</th>
    <th>Explanation</th>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Data</b></td>
    <td><code>ggplot(data)</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>*The raw data that you want to visualise.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Aesthetics&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></td>
    <td><code>aes()</code></td>
    <td>*Aesthetic mappings between variables and visual properties.*</td>
  <tr>
    <td><b style='color:#67676;'>Geometries</b></td>
    <td><code>geom_*()</code></td>
    <td>*The geometric shapes representing the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Statistics</b></td>
    <td><code>stat_*()</code></td>
    <td>*The statistical transformations applied to the data.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Scales</b></td>
    <td><code>scale_*()</code></td>
    <td>*Maps between the data and the aesthetic dimensions.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Coordinate System</b></td>
    <td><code>coord_*()</code></td>
    <td>*Maps data into the plane of the data rectangle.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Facets</b></td>
    <td><code>facet_*()</code></td>
    <td>*The arrangement of the data into a grid of plots.*</td>
  </tr>
  <tr>
    <td><b style='color:#67676;'>Visual Themes</b></td>
    <td><code>theme()</code> and <code>theme_*()</code></td>
    <td>*The overall visual defaults of a plot.*</td>
  </tr>
</table>


## Resources

+ [“ggplot2: Elegant Graphics for Data Analysis”](https://ggplot2-book.org/)<br>by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen.
+ [“Data Visualization: A Practical Introduction”](https://socviz.co/) by Kieran Healy
+ [“R Graphics Cookbook”](https://r-graphics.org/) by Winston Chang
+ [ggplot2 Extension Gallery](https://exts.ggplot2.tidyverse.org/gallery/)
+ [R Graph Gallery](https://www.r-graph-gallery.com/)
+ [Official ggplot2 reference](https://ggplot2.tidyverse.org/reference/)
+ [Official ggplot2 cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf)
+ [aesthetics finder](https://ggplot2tor.com/aesthetics/)
+ [My “A {ggplot2} Tutorial for Beautiful Plotting in R” tutorial](https://cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)


# That's it Folks...<br>Thank you!<br><br><b style='color:#404040;font-size:.45em;font-weight:700;font-family:cabinet grotesk;font-style:normal;font-feature-settings: "ss01" 1;'>You want more? Join the follow-up course!<br><a style='color:#663399;' href='https://www.oreilly.com/live-events/hands-on-guide-to-advanced-data-visualization-with-ggplot2-custom-design/0636920092434/'>"Advanced Data Visualization with {ggplot2}"</a></b>

